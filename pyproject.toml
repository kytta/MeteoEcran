# Â© 2023 Nikita Karamov <n.karamov@tu-braunschweig.de>
#
# SPDX-License-Identifier: EUPL-1.2 OR AGPL-3.0-only

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "MeteoEcran"
dynamic = ["version"]
description = "Current weather and forecast for digital signage"
readme = "README.md"
requires-python = ">=3.9"
license = "EUPL-1.2 OR AGPL-3.0-only"
authors = [
    { name = "Nikita Karamov", email = "me@kytta.dev" },
]
dependencies = [
    "starlette[full]",
    "uvicorn[standard]",
    "httpx>=0.24",
    "rich",
]

[project.urls]
Documentation = "https://github.com/kytta/MeteoEcran#readme"
Issues = "https://github.com/kytta/MeteoEcran/issues"
Source = "https://github.com/kytta/MeteoEcran"

[tool.hatch.version]
path = "meteoecran/__about__.py"

[tool.hatch.envs.default]
dependencies = [
    "covdefaults",
    "coverage[toml]>=6.5",
    "pytest",
]

[tool.hatch.envs.default.scripts]
dev = "uvicorn --reload meteoecran:app"
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "autopep8",
    "mypy>=1.0.0",
    "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:meteoecran tests}"
style = [
    "ruff {args:.}",
    "autopep8 --diff {args:.}",
]
fmt = [
    "autopep8 --in-place --recursive {args:.}",
    "ruff --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.hatch.envs.reqs]
detached = true
dependencies = [
    "pip-tools>=6",
]
[tool.hatch.envs.reqs.scripts]
compile = "pip-compile --header --annotate --output-file=requirements.txt --allow-unsafe --generate-hashes --resolver=backtracking {args:pyproject.toml}"

[tool.autopep8]
ignore = ["W503"]

[tool.coverage.run]
plugins = ["covdefaults"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_missing_imports = true
check_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_defs = false

[tool.ruff]
line-length = 79
select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "UP",
    "YTT",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "EXE",
    "ISC",
    "ICN",
    "INP",
    "PIE",
    "T20",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TID",
    "TCH",
    "ARG",
    "PTH",
    "ERA",
    "PL",
    "TRY",
    "RUF",
]
ignore = [
]
unfixable = [
    # Don't just remove unused code
    "ERA",
    # Don't touch unused imports
    "F401",
]

[tool.ruff.per-file-ignores]
"src/*" = [
    "PT",
]
"tests/*" = [
    "ANN",  # type annotations
    "D",  # docstrings
    "FBT001",  # Boolean positional arg in function definition
    "PLR0913",  # too many function arguments
    "PLR2004",  # magic values
    "S101",  # use of assert detected
]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["meteoecran"]
force-single-line = true

[tool.ruff.pycodestyle]
max-doc-length = 72

[tool.ruff.pydocstyle]
convention = "pep257"
